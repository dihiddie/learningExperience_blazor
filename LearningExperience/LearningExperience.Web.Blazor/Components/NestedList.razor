@using LearningExperience.Web.Blazor.Models
@if (Documents != null)
{
    foreach (var docLevel1 in Documents)
    {
        <div class="doc" style="display: inline-block">
            <a class="@listGroupActionClass" @onclick="() => OnDocumentClickAsync(docLevel1)"><i class="arrow @docLevel1.ArrowState"></i> @((MarkupString)docLevel1.Value)</a>
        </div>
        foreach (var docLevel2 in docLevel1.Documents)
        {
            <div class="doc" style="display: @docLevel1.DisplayState; padding-left: 7px;">
                <a class="@listGroupActionClass" @onclick="() => OnDocumentClickAsync(docLevel2)"><i class="arrow @docLevel2.ArrowState"></i>@((MarkupString)docLevel2.Value)</a>
            </div>
            foreach (var docLevel3 in docLevel2.Documents)
            {
                <div class="doc" style="display: @docLevel2.DisplayState; padding-left: 17px;">
                    <a class="@listGroupActionClass" @onclick="() => OnDocumentClickAsync(docLevel3)"><i class="arrow @docLevel3.ArrowState"></i>@((MarkupString)docLevel3.Value)</a>
                </div>
                foreach (var docLevel4 in docLevel3.Documents)
                {
                    <div class="doc" style="display: @docLevel3.DisplayState; padding-left: 24px;">
                        <a id="@(docLevel4.SelectedId)" class="@listGroupActionClass" @onclick="() => OnDocumentClickAsync(docLevel4)">
                            <i class="dot @(docLevel4.FilledState)"></i>@((MarkupString)docLevel4.Value)
                        </a>
                    </div>
                }
            }
        }
    }
}
else
{
    <div class="lds-hourglass"></div>
}

@code {
    [Parameter] public List<ClickableDocument> Documents { get; set; }

    [Parameter] public EventCallback<ClickableDocument> OnBottomLevelReached { get; set; }

    private string listGroupActionClass = "list-group-item list-group-item-action";

    private async Task OnDocumentClickAsync(ClickableDocument clickedDocument)
    {
        clickedDocument.IsClicked = !clickedDocument.IsClicked;
        if (!clickedDocument.Documents.Any())
        {
            clickedDocument.IsSelected = true;
            ResetSelected(clickedDocument);
            await OnBottomLevelReached.InvokeAsync(clickedDocument).ConfigureAwait(false);
        }
        await CloseNestedTabsAsync(clickedDocument).ConfigureAwait(false);
    }

    private async Task CloseNestedTabsAsync(ClickableDocument document)
    {
        if (document.Documents == null) return;
        foreach (var nestedDoc in document.Documents)
        {
            nestedDoc.IsClicked = false;
            await CloseNestedTabsAsync(nestedDoc).ConfigureAwait(false);
        }
    }

    private void ResetSelected(ClickableDocument clickedDocument)
    {
        foreach (var docLevel1 in Documents)
            foreach (var docLevel2 in docLevel1.Documents)
                foreach (var docLevel3 in docLevel2.Documents)
                    foreach (var selectedDocument in docLevel3.Documents.Where(x => x.IsSelected))
                        if (selectedDocument != clickedDocument) selectedDocument.IsSelected = false;
    }

}
