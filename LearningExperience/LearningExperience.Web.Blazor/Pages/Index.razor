@page "/"
@using LearningExperience.Core.Documents.Models
@using LearningExperience.Web.Blazor.Models
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime

<div class="sidebar">
    <NavMenu OnBottomLevelReached="@LoadFileContentAsync" Documents="@documents" />
</div>

<div class="main" id="main">
    <Search OnDocumentsFiltered ="@ReloadDocuments" Documents="@documents"></Search>
    <div class="content px-4">
        @((MarkupString)contentMarkup)
    </div>
</div>

@code
{
    DocumentsScheme<ClickableDocument> documentsScheme;

    List<ClickableDocument> documents;

    string contentMarkup = "<p>Выберите тему, чтобы увидеть ее содержимое</p>";

    protected override async Task OnInitializedAsync()
    {
        documentsScheme = await HttpClient.GetFromJsonAsync<DocumentsScheme<ClickableDocument>>($"https://localhost:5000/api/contentloader").ConfigureAwait(false);
        documents = documentsScheme.Documents;
    }

    private async Task LoadFileContentAsync(ClickableDocument document)
    {
        try
        {
            contentMarkup = @"<div class=""lds-hourglass""></div>";
            var decoded = Uri.EscapeUriString(document.Path);
            var response = await HttpClient.GetAsync($"https://localhost:5000/api/contentloader/{decoded}").ConfigureAwait(false);
            var content = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            contentMarkup = $"<h4>{document.Value}</h4><hr/>{Environment.NewLine}{content}";
            await ScrollToElementIdAsync("main").ConfigureAwait(false);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private ValueTask ScrollToElementIdAsync(string elementId) => JsRuntime.InvokeVoidAsync("scrollToElementId", elementId);

    private void ReloadDocuments(List<ClickableDocument> filteredDocuments) => documents = filteredDocuments;
}
