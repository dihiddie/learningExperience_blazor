@page "/"
@using LearningExperience.Core.Documents.Models
@using LearningExperience.Web.Blazor.Models
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime

<div class="sidebar">
    <NavMenu OnBottomLevelReached="@LoadFileContentAsync" Documents="@documents" />
</div>

<div class="main" id="main">
    <Search OnDocumentsFiltered ="@ReloadDocuments" OnDocumentsFilterStarted="@SetLoader"></Search>
    <Editor Content="@contentMarkup" Header="@clickedDocument?.Value" NewDoc="true" DocumentPath="@clickedDocument?.Path"></Editor>
</div>

@code
{
    DocumentsScheme<ClickableDocument> documentsScheme;

    List<ClickableDocument> documents;

    string contentMarkup = "<p>Выберите тему, чтобы увидеть ее содержимое</p>";

    ClickableDocument clickedDocument;

    protected override async Task OnInitializedAsync()
    {
        documentsScheme = await HttpClient.GetFromJsonAsync<DocumentsScheme<ClickableDocument>>($"https://localhost:5000/api/contentloader").ConfigureAwait(false);
        documents = documentsScheme.Documents;
    }

    private async Task LoadFileContentAsync(ClickableDocument document)
    {
        SetLoader();
        var decoded = Uri.EscapeUriString(document.Path);
        var response = await HttpClient.GetAsync($"https://localhost:5000/api/contentloader/{decoded}").ConfigureAwait(false);
        contentMarkup = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        clickedDocument = document;
        await ScrollToElementIdAsync("main").ConfigureAwait(false);
    }

    private ValueTask ScrollToElementIdAsync(string elementId) => JsRuntime.InvokeVoidAsync("scrollToElementId", elementId);

    private void ReloadDocuments(List<ClickableDocument> filteredDocuments)
    {
        contentMarkup = "<p>Выберите тему, чтобы увидеть ее содержимое</p>";
        documents = filteredDocuments;
    }

    private void SetLoader()
    {
        contentMarkup = @"<div class=""lds-hourglass""></div>";
    }
}
