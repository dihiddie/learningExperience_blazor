@using LearningExperience.Web.Blazor.Models
@if (Documents != null)
{
    foreach (var docLevel1 in Documents)
    {
        <div class="doc" style="display: inline-block">
            <a class="@listGroupActionClass" @onclick="() => OnDocumentClickAsync(docLevel1)"><i class="arrow @docLevel1.ArrowState"></i>@docLevel1.Value</a>
        </div>
        foreach (var docLevel2 in docLevel1.Documents)
        {
            <div class="doc" style="display: @docLevel1.DisplayState; padding-left: 7px;">
                <a class="@listGroupActionClass" @onclick="() => OnDocumentClickAsync(docLevel2)"><i class="arrow @docLevel2.ArrowState"></i>@docLevel2.Value</a>
            </div>
            foreach(var docLevel3 in docLevel2.Documents)
            {
                <div class="doc" style="display: @docLevel2.DisplayState; padding-left: 17px;">
                    <a class="@listGroupActionClass" @onclick="() => OnDocumentClickAsync(docLevel3)"><i class="arrow @docLevel3.ArrowState"></i>@docLevel3.Value</a>
                </div>
                foreach(var docLevel4 in docLevel3.Documents)
                {
                    <div class="doc" style="display: @docLevel3.DisplayState; padding-left: 24px;">
                        <a class="@listGroupActionClass" @onclick="() => OnDocumentClickAsync(docLevel4)"><i class="dot filled"></i>@docLevel4.Value</a>
                    </div>
                }
            }
        }
    }
}

@code {
    [Parameter] public List<Document> Documents { get; set; }

    [Parameter] public EventCallback<Document> OnBottomLevelReached { get; set; }

    private string listGroupActionClass = "list-group-item list-group-item-action";

    private async Task OnDocumentClickAsync(Document clickedDocument)
    {
        clickedDocument.IsClicked = !clickedDocument.IsClicked;
        if (!clickedDocument.Documents.Any())
        {
            Console.WriteLine("reached the bottom");
            await OnBottomLevelReached.InvokeAsync(clickedDocument).ConfigureAwait(false);
        }
        await CloseNestedTabsAsync(clickedDocument).ConfigureAwait(false);
    }

    private async Task CloseNestedTabsAsync(Document document)
    {
        if (document.Documents == null) return;
        foreach (var nestedDoc in document.Documents)
        {
            nestedDoc.IsClicked = false;
            await CloseNestedTabsAsync(nestedDoc).ConfigureAwait(false);
        }
    }
}
