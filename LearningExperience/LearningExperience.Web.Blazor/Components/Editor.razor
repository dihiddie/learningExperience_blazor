@using LearningExperience.Web.Blazor.Models
@inject HttpClient HttpClient
    <div class="content px-4">
        @if (!string.IsNullOrEmpty(Header))
        {
            <div>
                <a class="edit" href="" @onclick="OnEditClick">
                    <img src="icons/edit.png" style="@iconCommonStyle" />
                </a>
                <a class="edit" href="" @onclick="SaveChangesAsync">
                    <img src="icons/floppy-disk.png" style="@iconCommonStyle display: @(NewDoc ? "none" : saveButtonDisplay)" />
                </a>
                <h4 style="display: inline-block; vertical-align: middle">@((MarkupString)Header)</h4>
                <i style="font-size: 14px;">@(NewDoc ? string.Empty : onEditModeSuffix)</i>
            </div>
            <i style="font-size: 12px; color: @saveResultColor">@(NewDoc ? string.Empty : saveResultMessage)</i>
            <hr />
        }
        @if (onEditMode && !NewDoc)
        {
            <div style="position: relative;">
                <textarea style="position: absolute; width: 100%; height: 850px" class="form-control" @bind-value="Content" @bind-value:event="oninput"></textarea>
            </div>
        }
        else
        {
            @((MarkupString)Content)
        }
    </div>

@code {
    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public string Header { get; set; }

    [Parameter]
    public string DocumentPath { get; set; }

    [Parameter]
    public bool NewDoc { get; set; }

    [Parameter]
    public ClickableDocument Document { get; set; }

    string onEditModeSuffix;
    string saveResultMessage;
    string saveResultColor;
    bool onEditMode;

    string saveButtonDisplay = "none";
    string iconCommonStyle = "width: 20px; height: 20px; margin-right: 3px; cursor: pointer;";

    private void OnEditClick()
    {
        if (NewDoc) onEditMode = false;

        NewDoc = false;
        onEditMode = !onEditMode;
        saveResultMessage = null;
        saveButtonDisplay = onEditMode ? "show" : "none";
        onEditModeSuffix = onEditMode ? " (в режиме редактирования)" : null;
    }

    private async Task SaveChangesAsync()
    {
        try
        {
            Document.HasContent = !string.IsNullOrEmpty(Content);
            await HttpClient.PostAsync($"api/contentloader?path={DocumentPath}&content={Content}", null).ConfigureAwait(false);
            saveResultColor = "green";
            saveResultMessage = "Изменения сохранены";
        }
        catch
        {
            saveResultColor = "#ff0033";
            saveResultMessage = "Произошла ошибка при сохранении изменений";
        }
    }
}
